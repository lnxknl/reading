  采用传统过程式语言进行模块化编程时，主要通过自顶向下方法来进行系统设计。 自顶向下设计也称为逐步求精（stepwise refinement），是将一个系统逐层分解为子系统的设计过程。首先
  此并不给出各个子系统的细节。其次，对每个子系统重复这个设计过程，即再将每个子系统 分解为下一层的子系统。就这样不断细化每个子系统，直至子系统的功能足够简明，可以直 接编码
  实现为止。

  自顶向下设计具有两个特征：第一，要求设计者一开始就对整个系统有清楚的理解，否 则第一步的分解就无法进行；第二，任何子系统在足够细化之前无法开始编码实现，因而必 须等到所有
  子系统都足够细化，才可能对系统编码实现及测试。
以相信，由于分解过程总是导致越来越小的程序部件，

                                                                                4.3.1 顶层设计


  根据 calendar 程序的规格说明，很容易设计一个简单的 IPO 模式的算法：首先从用户处 获得年份输入 year，然后计算该年份 1 月 1 日是星期几，最后按特定格式输出年历。我们用 伪代
  码来表示该算法，如下：
     输入 year
     计算 year 年 1 月 1 日是星期几 输出年历

  这个算法属于高层设计，其中第二、第三两个步骤都不是一目了然能直接编码实现的， 但我们不妨假设每个步骤都由一个函数实现，从而可以利用这些函数实现程序。

  首先，尽管第一个步骤“输入 year”看上去很容易用 input 语句实现，但我们仍然先 用一个顶层模块——函数 getYear()来表示该步骤的实现。函数 getYear()负责从用户 处获得输入并返回给
  主程序使用，因此我们将函数的返回值赋值给主程序变量 year。至此， 我们的 calendar 程序取得了第一个进展：
     def main():
         year = getYear()

  其次，计算 year 年 1 月 1 日是星期几，这个步骤不是那么显然，但我们仍然假设函数firstDay()能够实现该步骤，这个函数以 year 作为输入，然后返回一个代表星期几的值（例如，用
  分别表示星期一到星期六）。在主程序中添加一行调用firstDay()的语句，并将函数返回值赋值给主程序变量 w，这时程序就进展到如下形式： def main():

     year = getYear() w = firstDay(year)

  最后一步是输出年历，仍然假设函数 printCalendar()能够实现该步骤，此函数需要用到的信息包括 year 和 w，无需提供返回值。在 main 中添加相应的函数调用语句之后，得到 calendar
  程序的完整结构如下：
     def main():
         year = getYear()
         w = firstDay(year)
         printCalendar(year,w)

  至此，我们做出了 calendar 程序的顶层设计，将原始问题分解成了三个模块，当然各模块的细节尚不清楚。主程序虽然只有寥寥 3 行，看上去不过是上面的算法伪代码略加细化的 结果，但
  main 这个层次，并不需要 关心 getYear()等函数的实现细节，只需要关注它们对于给定的参数能返回预定的数据。 亦即，只关心每个子程序“做什么”，而非“怎么做”。函数接口正是表达“做
  什么”信息的。
  自顶向下设计中经常使用一种设计工具——结构图（或称模块层次图），其中用矩形表 示程序模块，用两个矩形之间的连线表示模块间的调用关系，在连线旁边用箭头和标注来指 明模块之间的
  低层模块是被调用模块（或受控模块）。结构图最顶层就主程序（总控模块）。例如，calendar 程序的顶层设计可以用如图 4.7 所示的结构图来表示。

  不外乎要做两件事情：一是将问题要处理的数据表示出来，这可以借助编程语言提供的基本 数据类型、复杂类型构造手段以及更高级的逻辑数据结构等来实现；二是设计对这些数据进 行处
  理的算法过程，并利用编程语言提供的各种语句编制成一步一步执行的操作序列。因此， 用计算机解决问题的关键是确定问题所涉及的数据以及对数据的操作。
  关于数据和操作这两部分的关系，在程序设计思想和方法的发展过程中存在两种不同的 观点：一种是传统的以操作为中心的面向过程观点，一种是现代的以数据为中心的面向对象 观点。

  以一个比喻来形象地展示这种观点：数据与操作之间的关系正如心与箭的关系——没 有丘比特的箭，两颗心是不会彼此连结的。

  在以操作为中心的设计理念下，程序中的数据有时对整个操作过程都是公开的，可以被 操作过程中的每个步骤访问、处理。例如，假设程序 7.1 的操作不是单一的加法，而是在加法操作（
  第 3 行）之后还有两个操作：
     w = x – y
     z = z * w

  可以看出，数据（x、y、z、w）对程序中所有的操作都是公开的。这时，程序中对数据的访问不受任何控制，非常容易出现错误的操作。

  不过，作为高抽象级别操作的函数具有一定的访问控制能力。函数就像一个提供某种功 能的黑箱，使用者需要的只是它的功能，并不需要知晓它内部是如何实现功能的。函数内部 处理的数
  例如程序 7.2 中的两个函数 op1 和 op2 都在处理数据 x。数内部的数据。然而， 程序中仍然有一些全局数据是对所有操作（包括函数）公开的，仍然存在前述访问控制问题，

  总之，不管程序是简单还是复杂，不管操作是语句级的还是函数级的，传统程序设计都 是按照数据与操作分离的观点，以过程为中心展开程序设计的。在这种面向过程的编程范型 中，强调
  设计方法，将使用低级别操作的复杂过程设计成使用高级别操作的简单过程。行什 么操作以及各操作的先后顺序如何安排。当程序很复杂时，可以采用自顶向下设计和模块化

  为了适应 GUI 程序这类没有明确的预定义操作次序、靠不确定的事件来驱动的程序和系 统的开发，提高开发效率和质量，计算机科学家提出了一种新的观点来看待数据与操作之间 的关系，
  即面向对象的观点。

  什么是面向对象？要回答这个问题，首先要理解面向对象思想中最基本的观点：数据和对数据的操作不可分离。

  总之，数据与对数据的操作确实是紧密相关、不可分离的。既然如此，那我们干脆将数 据和操作两者结合在一起，抽象出一种实体：该实体拥有一些数据，同时也知道如何对这些 数据进行
  相比，现在心、箭合为一体，就好比青年男女不是等待丘比特的撮 合，而是自备弓箭，随心而动。，与图 7.1

  OOP 的特色包括抽象、封装、消息、模块化、多态性、继承等。

     class Person:
         def __init__ (self,n,y):
             self.name = n self.year = y
         def whatName(self):
             print "My name is",self.name
         def howOld(self,y):
             age = y – self.year
             if age > 0:
                 print "My age in",y,"is",age
             else:
                 print "I was born in",self.year

     例如，下面的语句先导入 Person 类，然后创建一个 Person 对象，并使变量 p1 引用该对象：

     >>> from person import Person
     >>> p1 = Person("Lucy",2005)

  这里将类名当成一个函数来用，称为类的构造器（constructor，或称构造函数）。构造器返回 一个新对象，通常需要定义<变量>来引用这个新对象。注意，虽然<变量>只是对新对象的引 用
  ，但习惯上我们也常说<变量>就是新对象本身，这一般不会产生混淆。
  如果希望创建对象时将对象定制成特定的初始状态，则可以在类中定义特殊的 __init__ 方法③。创建新对象时，Python 自动调用 __init__，实现对新对象的初始化，比如为该对象所 拥有
  时必须提供相应的实参。但由于 __init__ 不是直接调用的，无法直接将实 参传递给它，所以我们将所需实参传递给构造器，再由构造器自动传递给 __init__ 。不过，__init__ 的特殊参
  数 self 是一个例外，传递给 self 的实参是新创建的对象（更准确地说是对新 建对象的引用）。

  同样地，Python 自动调用 init 方法，只不过这次传递给该方法的参数是 p2、"Tom"和 1990， 即相当于函数调用

     __init__ (p2,"Tom",1990)

  用写作文打比方的话，程序 7.4 采用的是流水帐式的、毫无章法结构的作文方法，它将所有数据和操作语句全都混在一起。程序虽然不长，却使用了 10 个变量，要想理解这个程序就必须时
  7.3 中的语句，形成一些具有相对独立性的模块（函数）。下面就是炮弹模拟程序的 模块化版本：序的结构，增强程序的易理解性。我们利用模块化来重新组织程序
     def main():
         angle = input("输入发射角度(度): ")
         v = input("输入初速度(米/秒): ")
         h0 = input("输入初始高度(米): ")
         t = input("输入时间间隔(秒): ")
         theta = (angle * pi) / 180.0
         xv = v * cos(theta)
         yv = v * sin(theta)
         xpos = 0
         ypos = h0
         while ypos >= 0:
             xpos = xpos + t * xv
             yv1 = yv - t * 9.8
             ypos = ypos + t * (yv + yv1) / 2.0
             yv = yv1
         print "射程: %0.1f 米." % (xpos)
//
  与程序 7.4 相比，程序 7.5 的主程序 main 显得非常简洁、容易理解。main 中用到的变量 从 10 个减到 8 个，少掉的两个变量是 theta 和 yv1。变量 theta 存储的是以弧度为单位的发
  入数据，又不是输出数据，也不是贯穿算法始终的关键数据。因此，将 theta 隐藏在用到它的 函数 getXY 中，是符合它的“跑龙套”身份的做法。基于同样的理由，yv1 也被隐藏在了函 数
  update 中。
  然而，尽管模块化编程改善了程序的结构，使程序易读易理解，但程序 7.5 的主程序仍 然比较复杂。为了描述炮弹的飞行状态，需要 xpos、ypos、xv 和 yv 等 4 个数据，其中 xpos、 y
  os 和 yv 是随时间 t 而变的，需要时时更新，这就导致了主循环中的那个复杂、累赘的函数 调用：

     def getInputs():
         a = input("输入发射角度(度): ")
         v = input("输入初速度(米/秒): ")
         h = input("输入初始高度(米): ")
         t = input("输入时间间隔(秒): ") return a,v,h,t
     def getXY(v,angle):
         theta = (angle * pi) / 180.0
         xv = v * cos(theta)
         yv = v * sin(theta) return xv,yv
     def update(t,xpos,ypos,xv,yv): xpos = xpos + t * xv
         yv1 = yv - t * 9.8
         ypos = ypos + t * (yv + yv1) / 2.0
         yv = yv1
         return xpos,ypos,yv
     def main():
         angle, v, h0, t = getInputs()
         xv, yv = getXY(v,angle) xpos = 0
         ypos = h0
         while ypos >= 0:
             xpos,ypos,yv = update(t,xpos,ypos,xv,yv)
         print "射程: %0.1f 米." % (xpos)

  函数作为功能黑盒子，应该提供简明易用的接口，而 update 函数的设计显然不够简明易 用，它需要输入 5 个参数，并输出 3 个返回值。这就像一台设计拙劣的电视机，从机壳内伸 出七
  八根电线，买回家后需要完成复杂的接线之后才能收看电视。请记住，如果函数接口过 于复杂，往往表明这个函数的设计需要改善。
  最后，我们用 OOP 来编写炮弹模拟程序。炮弹原本是现实世界中的一个对象，传统编 程方法却用 xpos、ypos、xv 和 yv 等四个分离的数据来描述它，这是典型的“只见树木不见 森林”。假
  类中，那么在主程序中要做的就是创建一个炮弹对象，然后由这个对象自己完成所有的计算 任务，代码形如：

     from math import pi,sin,cos
     class Projectile:
         def __init__ (self,angle,velocity,height):
             self.xpos = 0.0
             self.ypos = height
             theta = pi * angle / 180.0
             self.xv = velocity * cos(theta)
             self.yv = velocity * sin(theta)
         def update(self, time):
             self.xpos = self.xpos + time *
             self.xv yv1 = self.yv - 9.8 * time
             self.ypos = self.ypos + time * (self.yv + yv1) / 2.0
             self.yv = yv1
         def getX(self):
             return self.xpos
         def getY(self):
             return self.ypos
     def getInputs():
         a = input("输入发射角度(度): ")
         v = input("输入初速度(米/秒): ")
         h = input("输入初始高度(米): ")
         t = input("输入时间间隔(秒): ") return a,v,h,t
     def main():
         angle,v,h0,t = getInputs()
         cball = Projectile(angle,v,h0)
         while cball.getY() >= 0:
             cball.update(t)
         print "射程: %0.1f 米." % (cball.getX())

  我们当然可以让每个类单独构成一个模块，但这样一来，当类的数目很多时会导致模块 数目过多，反而增加程序的复杂性。实际上我们通常是将若干个相关的类存储在一个模块文 件中，例
  如 5.4.2 节介绍的 graphics.py 模块中就包含了所有图形类。不过，使用类的程序一 般都放在与类模块不同的模块中。

  两种模块化方法具有类似的优点，如代码重用、易维护、支持团队开发等，但他们导致 的程序具有完全不同的执行方式。面向对象程序是由很多对象组成的，对象之间通过交互（发 送、接
  模块化设计体现了信息隐藏的思想，即程序模块应当对模块用户尽可能隐藏内部细节，只保留必要的访问界面。对功能模块（函数），以 math 库中的函数 sqrt()为例，我们作为调用 者，
  7.6 定义 的 Projectile 类为例，该类的使用者无需了解炮弹究竟用什么数据来表示以及如何计算其飞 行，只需要了解该类的使用界面（update、getX、getY）就能编写炮弹模拟程序。

     class Student(Person):
         def __init__ (self,n,y,u,id):
             Person.__init__ (self,n,y)
             self.univ = u
             self.snum = id
         def getUniv(self):
             return self.univ
         def getNum(self):
             return self.snum

  reuse），即超类中的代码可以通过继承机制被子类重复使用。当我们需要定义一个新 类时，如果发现它与某个现有的类在很多方面都相同，那么就无需重新写代码来实现这些相 同行为，而
  只需继承现有功能。

  子类除了原样继承超类的方法，还可以修改继承来的超类方法，以便以自己的方式行事。 这种在子类中重新定义超类方法的情况是面向对象的又一特色，称为覆写（override，或称重 定义
  ）。

  多态性使得我们能够刻划不同类所提供的相似方法，对使用者来说易理解、易使用，能 够减少编程错误。相反，不同类的相似方法如果定义为不同名字，对使用者来说就很不方便。 例如，

  多态性的一种典型用法是，让处于同一层次的多种对象都能响应同一个消息，但导致的 行为由各对象决定。例如，如果“人”有学生、教师、官员等子类，这些子类就是处于同一 层次的，假
  式来处理他们。假设 tom 是个学生，huck 是个教师，jerry 是个官员，则我们可能写出下列代 码来统一处理这些对象：在编程时我们可以不管这些差别，以一种统一的方

     >>> people = [tom,huck,jerry]
     >>> for p in people:
     print p.getNum()

  理解了面 向 对象的基 本 概念之后 ， 就可以应 用 这些概念 来 进行面向 对 象 设 计（object-oriented design，简称 OOD）。 传统的程序设计方法是结构化的自顶向下设计，其思想
  是将软件系统分解为若干个功能，
  每个功能都是对数据的一个操作过程。功能又可以划分为若干个子功能，如此反复分解下去， 直至每个功能所对应的操作过程显而易见为止。在分解功能的同时，还要考虑各功能之间的 接
  口。这种方法是以过程（函数）为中心的，每个函数都是一个黑盒子，函数调用者只需了 解函数的功能，无需知道实现功能的细节。
  面向对象设计是以数据为中心来展开的。对于某种客观实体的数据，考虑可能施加在数 据上的各种操作，然后将数据和操作封装成一个黑盒子——对象。对象通过界面向外界提供 数据操作服
  对象作为服务提供者，也不需要考虑它的服务将被使用者如何使用，只需确保其服务能正确 处理数据即可。务接口不变，所有使用该服务的程序代码就不需要改变。同样地，

  面向对象技术专家 G. Booch 提出了一种基于词性分析的设计方法，该方法要求设计人员 从目标系统的描述出发，通过问题描述中的名词和动词，来发现候选对象及对象方法。因此， OOD
  不要加入人工的、主观的因素，这是因为面向对象思想的宗旨就是按客观世界的本来面目来 建模并开发应用系统。

  找出候选对象

  我们的目标是找出有助于解决问题的对象。从问题描述入手，找出问题描述中的名词， 然后逐个考察这些名词，看看是否合适作为对象。对象一般都包含一组相关数据项，如学生（包含学号
  、姓名、年龄等数据项）、课程（包含课程名、学分、教材等数据项）。而能用单 一数据表示的，或者只有单一行为的实体，一般不适合作为对象，如人数、姓名等。
  注意，由于人类可以同时考虑和理解的问题数目受到大脑记忆和处理能力的制约，因此 认定的对象数目不宜过多。合适的对象通常是问题中自然出现的而非人工生硬构造的实体， 而且对象
  应该向外界提供足够复杂的服务。
  确定对象的数据属性

  对于认定的对象，接下来就该确定对象的数据。能确定为对象数据的信息一般都具有普遍性，即所有同类对象都拥有的数据，例如学生的学号和姓名。另外，对象数据必须对解决 问题有用，
  类型的值，甚至可能是另一种对象。例如，学生选修的课程也是属于学生对象的数据，课程 本身也是对象。数据可能是学号、姓名这样的基本数据类型值，也有可能是复杂

  确定对象的行为属性

  认定了对象及其数据之后，接着考虑对象需要什么操作。我们从问题描述中找出动词，它们通常描述了对象的行为。例如，“学生选修课程”中的“选修”就是学生对象的行为。对 象的方法通常
  使用动词来命名。
  一类常见的方法是对实例变量的读取和设置方法。假设对象有实例变量 value，则通常应 提供 getValue 和 setValue 方法。这是因为对象数据是隐藏的，外界只能通过对象的方法来操 作
  对象数据。
  对象的方法就是对象向外界提供的界面。界面不完善（如缺少某些方法）会使对象的使 用者无从完成工作，但也不是说向外提供的方法越多越好。对象的界面设计应当遵循恰好够 用的原则
  ，即在能满足用户需要的条件下，界面越简洁越好。
  实现对象的方法

  有些方法用寥寥数行代码就能实现，有些方法则可能需要设计复杂的算法来实现。对于复杂方法，可以利用自顶向下逐步求精方法来设计。 在方法实现过程中，可能发现一个对象与其他对象
  之间的新的交互，这会提示我们为类增加新方法，或者增加新的类。
  迭代设计

  对于复杂程序设计，没有人能够一次性地顺利走过设计全过程。在设计过程中，经常需 要在设计、测试、增加新类或为现有类增加新方法等步骤之间循环往复。

  应当多尝试替代方案，即使一个设计方案看上去不太灵，也可以沿着该方案的方向试着 前行，看看会导致什么结果。好的设计一定是通过大量试错而得到的，正是因为错误的设计 才使我们
  明白应该设计什么样的系统。

  还要指出，对于小程序，OOD 一般起不了什么作用，说不定反而使编程变得麻烦。但当 编写的程序越来越大，类和对象就能很好地组织程序，减少代码量。

  迄今为止，本书所讨论的计算具有两个特点：第一，计算是确定的，即只要输入相同， 程序执行后得到的结果总是一样的；第二，程序在任意时刻只做一件事，不能同时做多件事。 这是传
  点是不确定性，即针对同样的输入，同一程序可能有不同的执行过程和结果。能够处 理随机现象的模拟方法，一种是能够同时做多件事的多线程并发。这两种计算形式的共同特

  下面我们写一个简单的程序，该程序的行为具有“混沌”现象的特征。所谓混沌现象， 是指在确定性系统中发生的看上去随机、不规则的运动，即用确定性理论描述的系统却表现 出不确定的
  地方的天气出现非常大的变化。这个比喻想说的其实就是气象具有混沌行为。事实上，现实 生活和工程技术问题中，混沌现象是无处不在的。下面的程序虽然简单，却具有混沌现象不 可预
  测和对初始值敏感的两个特征。
  【程序 9.1】chaos.py

     def main():
         x = input("Enter a number between 0 and 1: ")
         for i in range(10):
             x = 3.9 * x * (1 - x)
             print x
     main()

  面朝上，这是不确定的。研究随机事件的数学方法是统计，例如经过大量统计试验可以得出 结论：抛硬币时正面朝上和反面朝上的可能性是相等的，各占 50%。注意，说硬币正面朝 上和反

  这些公式就能得到随机数。不过，既然是用确定的数学公式计算出来的数值，那就不可能是 数学意义上的随机，因此准确的名称实际上是“伪随机数”。伪随机数在实际应用中完全可 以当作
  真随机数来使用，因为它具有真随机数的统计分布特性，简单地说就是“看上去”是 随机的。


  自顶向下设计的第一步是顶层设计，这需要设计者对问题的全局有清晰的认识。万一要 解决的问题非常复杂，或者用户需求不是很完整、清晰，这时顶层设计就非常困难。另外， 设计者有
  太大的缺点。顶向下层次中的某一层，这就导致下层的精化无法继续，从而影响整 个程序的开发。即便前面这两个问题都不存在，自顶向下设计也存在开发周期过长、工作量

  另一种程序设计方法是原型法（prototyping）。这种方法的思想是，先开发一个简单版 本，即功能少、界面简单的版本，然后再对这个简单版本逐步进行改善（添加或修改功能）， 直至完
  全满足用户需求。初始精简版程序称为原型（prototype）。应用原型法来进行软件开 发的步骤大致如下：
  （1）确认基本需求；

  （2）创建原型；

  （3）向用户演示或交付用户试用，获得反馈意见；

  （4）改善原型；回到（3），重复（3）、（4），直至用户最终认可。 可见，原型技术不是对整个问题按照“设计、实现、测试”的过程来开发，而是先按此


  过程创建一个原型，然后根据用户反馈再重复此过程来改善原型。这样，通过许多“设计－ 实现－测试”小循环，原型逐步得到改善和扩展，直至成为最终产品。因此原型法也称为“螺 旋式开
  发”。原型法适合于大型程序开发中需求分析难以一次完成的场合，也常用在程序用 户界面设计领域。


  原型法开发有很多优点，例如：用户可以通过实际使用的体验来评价软件产品是否合意， 而不是仅凭开发者口头的描述；开发者和用户可以在开发过程中发现以前没有考虑到的需求 或问题
  ；开发者可以在产品开发的早期就获得用户反馈，避免在开发后期来修改设计，因为 越往后，修改的代价就越大。
  原型法开发中的原型可以有两种处理方法。一种方法是，一开始构造的原型就是最终产 品的核心，后续工作都是对原型的改善，通过不断的积累和修改最后得到符合用户需求的产 品。开发
  示给用户看而获得反馈并改进。等到用户认可原型，该原型即被丢弃，开发者将基于用户已 经确认的需求开始正式开发产品。这种做法称为“快速原型法”，因为其主要目的是尽快构 造系统
  模型，强调的是开发速度。


  可以在不同层次上讨论并行。最底层是机器指令级并行，但这不是我们要关心的层次， 本节主要讨论在程序层次上的并行。


  CPU）每次只为一个顾客服务，等前面的顾客走了，后面的顾客才能获得服务。 串行执行方式有一个缺点，即 CPU 的利用率不高。例如，当一个程序正在等待用户输 入，这时 CPU 会在相当
  长的时间内无事可做；但因为程序还没结束，所以 CPU 又不能去执行别的程序。

  当然，如果计算机系统中有多个处理器（核心是 CPU），那么就可以做到真正的多个程 序“同时”执行，因为各 CPU 可以在同一时刻执行各自的指令。为了与单一 CPU 上的并发 相区别，我
  展方向就是多处理器并行计算。例如，中国的“天河一号”计算机曾经在全球最快计算机排 名中名列第一，它拥有 6144 个通用处理器和 5120 个加速处理器，其二期产品“天河一号 A”更是拥
  个八核处理器。即使在个人计算机领域，如今也普遍采用多核处理器，例如市场上已经有了 8 核处理器。

  线程与进程既相似，也有明显的区别。系统中的多个进程一般是由执行不同程序而创建 的，而多个线程是同一程序（进程）的多个执行流；多个进程的状态是各自独立的，而多线 程可以共
  享地址空间（代码和上下文）；调度进程时上下文切换比多线程的上下文切换开销 大；进程间通信比较麻烦，而线程之间通过共享内存很容易通信。
  在单个处理器上，可通过分时抢占或者线程自身执行情况来实现多线程的并发执行。前 者由操作系统进行调度，后者由线程自己放弃控制（比如执行到一个休眠指令时）。不同线 程之间切
  换得非常快，因此在用户看来各线程是在同时执行的。可见多线程与多任务、多进 程机制的实现技术是类似的。
  在多处理器或多核处理器系统中，各处理器或内核都可以执行线程，从而多线程可以真 正地并行执行。由于多核处理器现已成为主流，因此了解并利用多线程技术对程序设计来说 变得越来
  越重要。
  能对用户输入作出反应。如图 9.2 所示。程来执行这个长时间计算任务，并让另 一个线程监控输入输出事件，两个线程的并发执行就可以使应用程序在执行计算任务的同时

  多线程程序中，由于各线程是相互独立的，它们的并发执行没有确定次序可言，因此线 程是一种非确定性的计算模型，同一个程序的多次执行未必导致同样的结果。所以，多线程 计算模型
  不具有串行计算模型的可理解性、可预测性和确定性性质，使用时要非常小心。

  Python 提供了两个支持线程的模块，一个是较老的 thread 模块，另一个是较新的 threading 模块。其中 threading 采用了面向对象实现，功能更强，建议读者使用。

  执行特定任务，并且主线程和子线程是并发执行的。 每个线程的生命期包括创建、启动、执行和结束四个阶段。 当主线程结束退出时，它所创建的子线程是否继续生存（如果还没有结束的
  话）依赖于系统平台，有的平台直接结束各子线程，有的平台则允许子线程继续执行。


  下面用一个例子来说明 thread 模块的用法。程序 9.3 采用孙悟空拔毫毛变出小猴子的故事来演示主线程与它所创建的子线程的关系。主线程是孙悟空，子线程是小猴子。

  【程序 9.3】eg9_3.py

     # -*- coding: cp936 -*- import thread
     def task(tName,n):
         for i in range(n):
             print "%s:%d\n" % (tName,i)
             print "%s:任务完成!回真身去喽...\n" % tName
             thread.interrupt_main()
     print "<老孙>:我是孙悟空!"
     print "<老孙>:我拔根毫毛变个小猴儿~~~"
     thread.start_new_thread(task,("<小猴>",3))
     print "<老孙>:我睡会儿,小猴儿干完活再叫醒我~~~\n"
     while True:
         print "<老孙>:Zzzzzzz\n"

  程序执行后，孙悟空（主线程）先说了两句话，然后创建小猴子，最后进入一个无穷循 环。小猴子创建后就立即启动，执行函数 task，该函数的任务只是显示简单的信息。task 函 数的最
  异常，从而中断主线程的执行。如果没有这条语句，主线程将一直处于 无穷循环之中而无法结束。下面是程序的执行效果：

     <老孙>:我是孙悟空!
     <老孙>:我拔根毫毛变个小猴儿~~~
     <老孙>:我睡会儿,小猴儿干完活再叫醒我~~~
     <小猴>:0
     <老孙>:Zzzzzzz
     <小猴>:1
     <老孙>:Zzzzzzz
     <小猴>:2
     <老孙>:Zzzzzzz
     <小猴>:任务完成!回真身去喽...
     <老孙>:Zzzzzzz
     Traceback (most recent call last): File "eg9_3.py", line 15, in <module>
     print "<老孙>:Zzzzzzz\n"

  从输出结果可见，主线程和子线程确实是在以交叉方式并行执行。 顺便说一下，由于程序 9.3 中使用了汉字，所以要在程序的第一行使用

     # -*- coding: cp936 -*-

  其作用是告诉 Python 解释器代码中使用了 cp936 编码的字符（即汉字）。 下面再看一个例子。程序 9.4 的主线程创建了两个子线程，两个子线程都执行同一个函数 task，但以不同的节
  不同，主线程创建完子线程后就结束了，留下两个子线程继续执行①。意， 与程序 9.3

     # -*- coding: cp936 -*-
     from threading import Thread from time import sleep
     def task(tName,n,delay):
         for i in range(n):
             sleep(delay)
             print "%s:%d\n" % (tName,i)
     print "<老孙>:我是孙悟空!"
     print "<老孙>:我拔根毫毛变个小猴儿<哼>"
     t1 = Thread(target=task,args=("<哼>",5,2))
     print "<老孙>:我再拔根毫毛变个小猴儿<哈>"
     t2 = Thread(target=task,args=("<哈>",5,4))
     t1.start()
     t2.start()
     print "<老孙>:不管你们喽,俺老孙去也~~~\n"

  程序 9.6 是采用上述方法的一个例子。

     # -*- coding: cp936 -*-
     from threading import Thread
     from time import sleep
     exitFlag = False
     class myThread(Thread):
         def __init__ (self,tName,n,delay):
             Thread. __init__ (self)
             self.name = tName
             self.loopnum = n
             self.delay = delay
         def run(self):
             print self.name + ": 上场...\n" task(self.name,self.loopnum,self.delay)
             print self.name + ": 退场...\n"
         def task(tName,n,delay): for i in range(n):
             if exitFlag:
             print "<哼>已退场,<哈>也提前结束吧~~~\n" return
             sleep(delay)
             print "%s:%d\n" % (tName,i)
     print "<老孙>:我是孙悟空!"
     print "<老孙>:我拔根毫毛变个小猴儿<哼>"
     t1 = myThread("<哼>",5,2)
     t1.start()
     print "<老孙>:我再拔根毫毛变个小猴儿<哈>\n"
     t2 = myThread("<哈>",10,4)
     t2.start()
     while t2.isAlive():
         if not t1.isAlive():
             exitFlag = True
     print "<老孙>:小猴儿们都回了,俺老孙去也~~~"

  执行后面的任务，直接结束返回。读者应该注意到这件事的意义，它意味着多个线程之间是 可以进行协作、同步的，而不是各自只管闷着头做自己的事情。

  又如，Thread 对象具有一个 join()方法，一个线程对象 t1 可以调用另一个线程对象 t2 的 join()方法，这导致 t1 暂停执行，直至 t2 执行结束（或者执行一个指定的时间）。可见，
  oin 方法能实现让一个线程等待另一个线程以便进行某种同步的目的。

     >>> def find(list,x):
     for i in range(len(list)): if list[i] == x:
     return i return -1
     >>> find([2,4,6,8],6) 2
     >>> find([2,4,6,8],7)
     -1

  如果将大量数据存储在一个列表中，则使用枚举策略很合适，因为列表是通过位置索引 来访问其中数据成员的，“读取下一个数据”是良定义的操作，只要将当前位置索引加 1 即 可得下一个
  进行比较。如果某个成员就是 x，则返回该 成员在列表中的位置索引；如果 list 中没有 x 则返回-1。逐个取出 list 的成员并与 x

  find()函数对列表 list 从头到尾进行扫描，扫描过程中检验每一个成员是否 x，这个算法 称为线性搜索（linear search）算法。线性搜索算法很容易设计实现，而且当数据量不太大时，
  算法的性能也还可以。更重要的是，由于线性搜索是枚举每一个数据成员，因此适用于 无序数据集合，即数据没有按特定的大小次序排列。
  然而，当数据量很大时，逐个枚举集合中的数据就变得非常低效。这时只能通过更好地 组织数据，利用额外信息来提高搜索效率，尽量避免逐个检查所有数据。例如，假设列表数 据从小到
  限。事实上，在数据有序的情况下，存在比线性搜索算法好得多的算法（见 10.2）。了，可以直接下结论说找不到 x。这种改进可以提高线性搜索算法的性能，但改善得很有


     >>> for x in range(100):
             for y in range(100):
                 for z in range(100):
                     t = x + y + z
             m = 5*x + 3*y + z/3
             if t == 100 and m == 100:
                 print "x=",x,",y=",y,",z=",z
     x=  0  ,y=  25  ,z=  75
     x=  3  ,y=  20  ,z=  77
     x=  4  ,y=  18  ,z=  78
     x=  7  ,y=  13  ,z=  80
     x=  8  ,y=  11  ,z=  81
     x=  11  ,y=  6  ,z=  83
     x=  12  ,y=  4  ,z=  84

  采用枚举策略时应当尽量减小可能解集合，以便提高枚举效率。上面这个程序的效率显 然太差，因为三重嵌套循环实际上要枚举 100×100×100 种 x、y、z 组合。其实稍加思考就 能找到减
  z；其次，x 的可能值不超 过 20（否则钱不够），同理 y 的可能值不超过 33；最后，依题意每种鸡应当都至少买 1 只， 没有必要考虑等于 0 的情形。将这些分析落实到编程中，即可得
  效率更高的代码：
     >>> for x in range(1,20):
             for y in range(1,33):
                 z = 100 - x - y
                 m = 5*x + 3*y + z/3
                 if m == 100:
                     print "x=",x,",y=",y,",z=",z
     x=  3  ,y=  20  ,z=  77
     x=  4  ,y=  18  ,z=  78
     x=  7  ,y=  13  ,z=  80
     x=  8  ,y=  11  ,z=  81
     x=  11 ,y=  6   ,z=  83
     x=  12 ,y=  4   ,z=  84

  通过以上例子，我们看到枚举算法的核心思想是对问题的每一个可能解进行检验，看看 是否满足特定条件，这个枚举过程在编程时是通过循环语句和条件语句实现的。对于一些复 杂问题，
  如果嵌套循环的层数不确定或者层数太多，直接使用循环语句和条件语句实现枚举 检验是不合适甚至不可能的，这时可以考虑采用递归技术（见 10.2）。
  当问题规模较大时，可能解的空间也很大，采用枚举策略会导致效率很差。但是，鉴于 枚举算法设计简单，调试也容易，对于规模较小的问题是很好的策略。即使对于大规模的复 杂问题，
  枚举策略也可以作为整体求解算法的子算法出现。

  下面我们用另一种方式来观察阶乘的定义。在阶乘定义式中，等号右边的第一个 n 之后 的部分是什么？稍加思考即可看出就是(n-1)的阶乘，即阶乘定义式可写成：

     n! = n x (n - 1)!

  这个式子的含义是：n 的阶乘定义为 n 乘(n-1)的阶乘。我们看到，“阶乘”的定义中用到了 “阶乘”本身，这就是递归定义。

  现代编程语言都支持递归函数，Python 也不例外。读者也许会将上面的递归定义式直 接翻译成如下 Python 函数：

     def fac(n):
         return n * fac(n-1)

     >>> def fac(n):
             if n == 0:
                 return 1
             else:
                 return n * fac(n-1)

  要说明的是，上面的阶乘函数定义其实仍然有 bug：当 n 的初始值小于 1 时，调用 fac(n) 会导致无穷递归！解决这个问题很容易，只需在程序开始处检查 n 是否为负数即可，并且仅 当
  n 为非负自然数时才能计算阶乘。编写递归程序时很容易在终止条件上面犯错误，作为好 的编程习惯，我们应当围绕递归奠基情形测试各种情形。

  还要说明一点，每次递归调用 fac()都相当于调用一个新的函数，系统将为该函数的局 部变量和参数分配新的空间，与其他 fac()调用的局部变量和参数完全没有关系。初学者在 这一点上
  fac(n)的调用，这三次调用应当视为独立的三个函数，其中用到的参数 n 应当视为三个 相互独立的局部变量。

  递归对于处理列表是非常有用的，因为列表本身就是“递归结构”——任一列表都可看 作是由第一个数据成员与剩余数据列表组成的，即：[a1,a2,...,an]可视为由 a1 和[a2,...,an]组成。 编
  归调用来解决。显然，每次递归都导致处理一个更短的列表，如此递归下去终将到达空列表 情形，这正可作为奠基情形。在 Python 中通过索引很容易取得列表 list 的第一个数据和剩 余
  数据列表，它们分别是 list[0]和 list[1:]。

  对于简单列表的处理任务，用 for 循环语句也很容易实现；但当列表很复杂（例如列表 中的元素本身可能是列表），用循环语句就很难编程，而用递归则可以很容易地解决问题。 作为练习
  ，读者不妨思考一下如何逆向显示如下形状的列表：

     def binary(list,x): low = 0
         high = len(list) - 1
         while low <= high:
             mid = (low + high) / 2
             if list[mid] == x:
                 return mid
             elif list[mid] > x:
                 high = mid - 1
             else:
                 low = mid + 1
         return -1

     >>> def recBinSearch(list,x,low,high):
         if low > high:
             return -1
         mid = (low + high) / 2
         m = list[mid]
         if m == x:
             return mid
         elif x < m:
             return recBinSearch(list,x,low,mid-1)
         else:
             return recBinSearch(list,x,mid+1,high)
     >>> recBinSearch([1,3,5,7,9],5,0,4) 2

  从算法中可见，通过递归，我们将规模为 n 的问题转化成了两个规模为 n – 1 的问题。 如此递归下去，最终将转化成规模为 1 的问题。而 n = 1 的 Hanoi 塔问题是平凡的，直接移 动一
  Python 实现，并对 n = 3 的 情形进行验证。代码中 hanoi 函数的参数分别表示圆盘个数和三根柱子（源、目的地、临时 存放）。给出对上述算法的

     >>> def hanoi(n,source,dest,temp):
         if n == 1:
             print source,"->",dest
         else:
             hanoi(n-1,source,temp,dest)
             hanoi(1,source,dest,temp)
             hanoi(n-1,temp,dest,source)

  递归是非常重要的算法设计方法，在解决很多具有递归性质的问题、结构的时候，设计

  递归算法往往是直接而简单的。递归定义必须满足以下条件才是良定义的：

   - 有一个或多个无需递归的奠基情形；

   - 递归总是针对规模更小的问题。

   - 有了这两个条件，递归链最终将到达奠基情形，从而使递归过程终止。

  虽然递归算法容易设计、实现，也容易理解，但递归是有代价的。由于递归涉及大量的 函数调用，因此需要耗费较多的内存和较长的执行时间，即递归算法的效率较差。而迭代算 法不涉及
  函数调用，故速度更快，更节省内存。

  分治法（divide-and-conquer）是解决问题的一种常用策略，其思想是将难以处理的较大 问题分解为若干个较小的子问题，然后分别解决这些子问题，并从子问题的解构造出原问题 的解。
  分”是指将原问题分解，“治”是指解决问题。

     list[0],list[k] = list[k],list[0]

  其他轮次的处理也是一样。为此，在循环中需要用一个变量记录最小值的位置索引。 下面的 Python 代码实现了以上设计思想，其中每轮循环找出 list[i:n-1]中的最小值（用变量 min 记
  录其索引位置），并放入 list[i]中。
     >>> def selSort(list):
             n = len(list)
             for i in range(n-1):
                 min = i
                 for j in range(i+1,n):
                     if list[j] < list[min]:
                         min = j
                 list[i],list[min] = list[min],list[i]

  如果分到的牌不多，玩家一般用一只手将牌呈扇形握持，另一只手去整理排序。然而，如果 玩的是用到两三副牌的游戏，每个玩家分到的牌很多，那么玩家就会有手太小难以排序的烦 恼。
  它将大任务分解成较小任务，解决了较小任务后再合并结果。下面我们详细介绍这种利用分 治法进行排序的方法。合并两手牌以完成全部牌的排序。这就是归并排序的基本思想，
  给定一个较大的数据集合 S，先将数据平分为两部分 S1 和 S2，然后分别对 S1 和 S2 进行 排序，从而得到两个“局部有序”的序列。接下去将这两个局部有序序列合并成为“全局有 序”序列
  分别拿出自己的局部最小值进行比较，其中更小者显 然是全局最小值，因此应放入 S3 的第一个位置。如果全局最小值来自 S1，则 S1 中原来排在 该最小值后面的数据成为新的局部最小值
  S1 和 S2 的局部最小值，并将更小者放入 S3，直至 S1（或 S2）的所有数据都已放入 S3。最后，只需将 S2（或 S1）的剩余数据按序放入 S3 的尾部，即可得到全局有序序列。图 10.5 用
  整理扑克牌的例子展示了这个归并排序过程。

     def merge(list1,list2,mergelist):
         i,j,k = 0,0,0
         n1,n2 = len(list1),len(list2)
         while i < n1 and j < n2:
             if list1[i]<list2[j]:
                 mergelist[k] = list1[i]
                 i = i + 1
             else:
                 mergelist[k] = list2[j]
                 j = j + 1
             k = k + 1
         while i < n1:
             mergelist[k] = list1[i]
             i = i + 1
             k = k + 1
         while j < n2:
             mergelist[k] = list2[j]
             j = j + 1
             k = k + 1
     def mergeSort(datalist):
         n = len(datalist)
         if n > 1:
             m = n / 2
             list1,list2 = datalist[:m],datalist[m:]
             mergeSort(list1)
             mergeSort(list2)
             merge(list1,list2,datalist)
         data = [9,2,7,6,5,3]
         mergeSort(data)
         print data

  下面考虑另一种工程建设方案。工程规划者并不追求各加油站尽快投入使用，而一心只想以最小的投资完成工程。这时的指导思想是，每一期工程都尽可能选择当前所有线路中最 短的线路来
  铺设管道，并确保最终能将油库和所有加油站连通起来。

     指导思想当然是又快又省钱。一种想法是尽可能快地使加油站投入使用，每一期工程都 使一个加油站能够供油。那么，第一期必须在油库 A 与某个加油站之间铺设管道，问题是 选哪个
     的管道，可以在最短时间内建成，当然花费也是最少的。接下来考虑第二期工程时，可以选择一个从 A 或者 B 可到达的加油站，注意此时所选加油站不必与油库 A 直接相通，间接连 通
     千米管道。在工程的第三期，需要选择一个能与 A、B 或 C 可到达的加油站，这次最短的是 C 和 D 之间的 5 千米管道，因此选择 D 并铺设 CD 管 道。到目前为止，工程进展如图 10
  7 所示，图中实线段表示已经铺设的管道，B、C、D 都 能供油了。

  千米的管道系统。所以，我们讨论的两种方案都导致了最优的（即总长度最小） 输油管道系统。

  不难看出，实际中的许多问题都可以利用上述方案来解决，如下水道系统、芯片设计、 交通网、通信网等等。这些问题可以抽象成图论中的“最小支撑树”问题，上面两种解决方 案其实是解
  决最小支撑树问题的两个著名算法的应用。

  第一种方案称为 Prim 算法，其思想是从一个地点（如油库）出发，一个接一个地将其 他地点（如加油站）连入系统，其中每一步都尽可能选择最短连接路线。Prim 算法的伪代 码如下：

     Prim 算法
     1\. 初始时所有地点标记为不可通达。
     2\. 选择一个特定地点，标记为可通达。
     3\. 重复下列步骤，直至所有地点都被标记为可通达：
         选择距离最近的两个地点，其中一个地点的标记是可通达，另一个地点的标记是不可通 达。然后将这两个地点连接起来，并将原先不可通达的地点改标为可通达。

  第二种策略称为 Kruskal 算法，其思想是每一步将当前距离最近且尚未连通的两个地点 连接起来。如果某一步的当前最小长度线路所涉及的两个地点已经连通了，则放弃这个路线， 接着考
  虑其后线路。算法伪代码如下：
     Kruskal 算法
     重复以下步骤，直至所有地点都直接或间接地连通：
         将当前距离最近并且尚未连通的两个地点连接起来。

  Prim 算法和 Kruskal 算法虽然是不同的解决方法，但他们都能产生最小支撑树。这两个 算法其实反映了一个共同的算法设计方法——贪心法。贪心法指的是这样一种问题求解策 略：在求解
  算法在每一步都选择当前与已连通部分最近的地点，Kruskal 算法在每一步 都尽可能选择当前最短的线路，两者的最终目标都是构造最小支撑树。

  在迭代的每一步，贪心选择可以依赖于此前的迭代步骤中已经作出的选择，但不能依赖 于未来的选择。打个比方，贪心选择就像一个每次只计算一步棋的棋手，他总是选择当前能 获得最大
  也是不允许悔棋的。可见，贪心算法具有“只看眼前利益”和“落子无悔”的两大特点。取决于当前利益，而是要着眼全局。在贪心策略下，以后即使认识到前面某一步棋不佳，

  最后顺便提一下，在前面的输油管道问题中，为了从油库 A 向加油站 E 供油，采用贪 心算法设计出的方案是将 A 经 B、C、G、H、F 来与 E 连通，这条管线的总长度为 145 千 米。而假
  修建从油库到每一个加油站的最短管道，前述两个算法是不合适的。事实上，存在另一个采 用贪心法设计的著名算法——Dijkstra 最短路径算法，可以很好地解决这个问题。

import heapq as hq
import math

def dijkstra(G, s):
    n = len(G)
    visited = [False]*n
    weights = [math.inf]*n
    path = [None]*n
    queue = []
    weights[s] = 0
    hq.heappush(queue, (0, s))
    while len(queue) > 0:
        g, u = hq.heappop(queue)
        visited[u] = True
        for v, w in G[u]:
            if not visited[v]:
                f = g + w
                if f < weights[v]:
                    weights[v] = f
                    path[v] = u
                    hq.heappush(queue, (f, v))
    return path, weights

G = [[(1, 6), (3, 7)],
     [(2, 5), (3, 8), (4, -4)],
     [(1, -2), (4, 7)],
     [(2, -3), (4, 9)],
     [(0, 2)]]

print(dijkstra(G, 0))
