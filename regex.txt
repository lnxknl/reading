   正则表达式的使用，可以通过简单的办法来实现强大的功能。下面先给出一个简单的示例：

      ^.+@.+\\..+$

   通过使用正则表达式，可以：

    - 测试字符串内的模式。

    - 例如，可以测试输入字符串，以查看字符串内是否出现电话号码模式或信用卡号码模式。这称为数据验证。

    - 替换文本。

    - 可以使用正则表达式来识别文档中的特定文本，完全删除该文本或者用其他文本替换它。

    - 基于模式匹配从字符串中提取子字符串。

    - 可以查找文档内或输入域内特定的文本。

        - 构造正则表达式的方法和创建数学表达式的方法一样。也就是用多种元字符与运算符可以将小的表达式结合在一起来创建更大的表达式。正则表达式的组件可以是单个的字符、字符集
合、字符范围、字符间的选择或者所有这些组件的任意组合。

       字符 描述     \cx 匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。   \f 匹配一个换
页符。等价于 \x0c 和 \cL。   \n 匹配一个换行符。等价于 \x0a 和 \cJ。   \r 匹配一个回车符。等价于 \x0d 和 \cM。   \s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于
 [ \f\n\r\t\v]。   \S 匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。   \t 匹配一个制表符。等价于 \x09 和 \cI。   \v 匹配一个垂直制表符。等价于 \x0b 和 \cK。    特殊字符

       字符 描述     * 匹配前面的子表达式零次或多次。例如，zo 能匹配 "z" 以及 "zoo"。 等价于{0,}。   + 匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 "zo" 以及 "zoo"，
但不能匹匹配前面的子表达式零次或一次。例如，"do(es)?" 可以匹配 "do" 或 "does" 中的"do" 。? 等价于 {0,1}。   {n} n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 "ob" 中的是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 "Bob" 中的 'o'，但能匹配 "foooood" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。   {n,m} m 和 n 均
为非负整次。例如，"o{1,3}" 将匹配 "fooooood" 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。    由于章节编号在大的输入文档中会很可能超过九，所以

   如果您知道章节编号被限制为只有 99 章，可以使用下面的表达式来至少指定一位但至多两位数字。

      /Chapter [0-9]{1,2}/

   上面的表达式的缺点是，大于 99 的章节编号仍只匹配开头两位数字。另一个缺点是 Chapter 0 也将匹配。只匹配两位数字的更好的表达式如下：

      /Chapter [1-9][0-9]?/

   或

      /Chapter [1-9][0-9]{0,1}/

      <H1>Chapter 1 – Introduction to Regular Expressions</H1>

   下面的表达式匹配从开始小于符号 (<) 到关闭 H1 标记的大于符号 (>) 之间的所有内容。

      /<.*>/

   如果您只需要匹配开始 H1 标记，下面的"非贪心"表达式只匹配 <H1>。

      /<.*?>/

   通过在 *、+ 或 ? 限定符之后放置 ?，该表达式从"贪心"表达式转换为"非贪心"表达式或者最小匹配。

   定位符用来描述字符串或单词的边界，^和$分别指字符串的开始与结束，\b描述单词的前或后边界，\B表示非单词边界。

      /\bCha/

   \b 字符的位置是非常重要的。如果它位于要匹配的字符串的开始，它在单词的开始处查找匹配项。如果它位于字符串的结尾，它在单词的结尾处查找匹配项。例如，下面的表达式匹配单词 C
hapter 中的字符串 ter，因为它出现在字边界的前面：
      /ter\b/

   下面的表达式匹配 Chapter 中的字符串 apt，但不匹配 aptitude 中的字符串 apt：

      /\Bapt/

      Is is the cost of of gasoline going up up?

   上面的句子很显然有多个重复的单词。如果能设计一种方法定位该句子，而不必查找每个单词的重复出现，那该有多好。下面的正则表达式使用单个子表达式来实现这一点：

      /\b([a-z]+) \1\b/gi

   捕获的表达式，正如 [a-z]+ 指定的，包括一个或多个字母。正则表达式的第二部分是对以前捕获的子匹配项的引用，即，单词的第二个匹配项正好由括号表达式匹配。\1 指定第一个子匹配
项。字边界元字符确保只检测整个单词。否则，诸如"is issued"或"this is"之类的词组将不能正确地被此表达式识别。
   正则表达式后面的全局标记 (g) 指示，将该表达式应用到输入字符串中能够查找到的尽可能多的匹配。表达式的结尾处的不区分大小写 (i) 标记指定不区分大小写。多行标记指定换行符的
两边可能出现潜在的匹配。

      http://www.w3cschool.cc:80/html/html-tutorial.html

   下面的正则表达式提供该功能：

      /(\w+):\/\/([^/:]+)(:\d*)?([^# ]*)/

   第一个括号子表达式捕获 Web 地址的协议部分。该子表达式匹配在冒号和两个正斜杠前面的任何单词。第二个括号子表达式捕获地址的域地址部分。子表达式匹配 / 或 : 之外的一个或多个
字符地址指定的路径和/或页信息。该子表达式能匹配不包括 # 或空格字符的任何字符序列。或多个数字。只能重复一次该子表达式。最后，第四个括号子表达式捕获 Web

   将正则表达式应用到上面的 URI，各子匹配项包含下面的内容：

    - 第一个括号子表达式包含"http"

    - 第二个括号子表达式包含"www.w3cschool.cc"

    - 第三个括号子表达式包含":80"

    - 第四个括号子表达式包含"/html/html-tutorial.html"

   运算符 描述     \ 转义符   (), (?:), (?=), [] 圆括号和方括号   *, +, ?, {n}, {n,}, {n,m} 限定符   ^, $, \任何元字符、任何字符 定位点和序列（即：位置和顺序）   | 替换，
"或字符具有高于替换运算符的优先级，使得"m|food"匹配"m"或"food"。若要匹配"mood"或"food"，请使用括号创建子表达式，从而产生"(m|f)ood"。

      [a-z] //匹配所有的小写字母
      [A-Z] //匹配所有的大写字母
      [a-zA-Z] //匹配所有的字母
      [0-9] //匹配所有的数字
      [0-9\.\-] //匹配所有的数字，句号和减号
      [ \f\r\t\n] //匹配所有的白字符

   字符簇 描述     [[:alpha:]] 任何字母   [[:digit:]] 任何数字   [[:alnum:]] 任何字母和数字   [[:space:]] 任何空白字符   [[:upper:]] 任何大写字母   [[:lower:]] 任何小写字
母   [[:punct:]] 任何标点符号   [[:xdigit:]] 任何16进制的数字，相当于[0-9a-fA-F]    确定重复出现

   句点 (.) 匹配字符串中的各种打印或非打印字符，只有一个字符例外。这个例外就是换行符 (\n)。下面的正则表达式匹配 aac、abc、acc、adc 等等，以及 a1c、a2c、a-c 和 a#c：

      /a.c/

   正则表达式 描述     /\b([a-z]+) \1\b/gi 一个单词连续出现的位置。   /(\w+):\/\/([^/:]+)(:\d)?([^# ])/ 将一个URL解析为协议、域、端口及相对路径。   /^(?:Chapter|Section)
[1-A至z共26个字母再加一个-号。   /ter\b/ 可匹配chapter，而不能匹配terminal。   /\Bapt/ 可匹配chapter，而不能匹配aptitude。   /Windows(?=95 |98 |NT )/
   可匹配Windows95或Windows98或WindowsNT，当找到一个匹配后，从Windows后面开始进行下一次的检索匹配。   /^\s*$/ 匹配空行。   /\d{2}-\d{5}/ 验证由两位数字、一个连字符再加 5
位数/<\s*(\S+)(\s[^>]*)?>[\s\S]*<\s*\/\1\s*>/ 匹配 HTML 标记。
